openapi: 3.0.3
info:
  title: Automation Testing Website API
  description: |
    A comprehensive REST API designed for automation testing purposes. This API provides
    endpoints for user management, product catalog, file operations, and testing utilities
    to support various automation testing scenarios including functional, UI, API, and
    performance testing.

    ## Features
    - JWT-based authentication with role-based access control
    - CRUD operations for users and products
    - File upload/download capabilities
    - Testing utilities for error simulation and performance testing
    - Comprehensive error handling with consistent response formats

    ## Authentication
    Most endpoints require authentication using JWT tokens. Include the token in the
    Authorization header as: `Bearer <token>`

    ## Response Format
    All API responses follow a consistent format:
    - Success responses include `success: true`, `data`, and `timestamp`
    - Error responses include `success: false`, `error` object, and `timestamp`
    - Paginated responses include additional `pagination` metadata

  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:3001/api
    description: Development server
  - url: https://api.example.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Users
    description: User management operations
  - name: Products
    description: Product catalog management
  - name: Files
    description: File upload and management
  - name: Testing
    description: Testing utilities and error simulation

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # Common response schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
      required:
        - success
        - data
        - timestamp

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Invalid input data"
            details:
              type: object
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
      required:
        - success
        - error
        - timestamp

    PaginatedResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          properties:
            page:
              type: integer
              example: 1
            limit:
              type: integer
              example: 10
            total:
              type: integer
              example: 100
            totalPages:
              type: integer
              example: 10
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
      required:
        - success
        - data
        - pagination
        - timestamp

    # User schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [admin, user, guest]
          example: "user"
        profile:
          type: object
          properties:
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
            avatar:
              type: string
              format: uri
              example: "https://example.com/avatar.jpg"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
      required:
        - id
        - username
        - email
        - role
        - createdAt
        - updatedAt

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          example: "securepassword123"
        role:
          type: string
          enum: [admin, user, guest]
          default: user
          example: "user"
        profile:
          type: object
          properties:
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
      required:
        - username
        - email
        - password

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          example: "newsecurepassword123"
        role:
          type: string
          enum: [admin, user, guest]
          example: "user"
        profile:
          type: object
          properties:
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
            avatar:
              type: string
              format: uri
              example: "https://example.com/avatar.jpg"

    # Product schemas
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Wireless Headphones"
        description:
          type: string
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          minimum: 0
          example: 199.99
        category:
          type: string
          example: "Electronics"
        inStock:
          type: boolean
          example: true
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/product.jpg"
        tags:
          type: array
          items:
            type: string
          example: ["wireless", "audio", "electronics"]
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
      required:
        - id
        - name
        - description
        - price
        - category
        - inStock
        - createdAt
        - updatedAt

    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: "Wireless Headphones"
        description:
          type: string
          minLength: 1
          maxLength: 1000
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          minimum: 0
          example: 199.99
        category:
          type: string
          minLength: 1
          maxLength: 100
          example: "Electronics"
        inStock:
          type: boolean
          default: true
          example: true
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/product.jpg"
        tags:
          type: array
          items:
            type: string
          example: ["wireless", "audio", "electronics"]
      required:
        - name
        - description
        - price
        - category

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: "Wireless Headphones"
        description:
          type: string
          minLength: 1
          maxLength: 1000
          example: "High-quality wireless headphones with noise cancellation"
        price:
          type: number
          format: float
          minimum: 0
          example: 199.99
        category:
          type: string
          minLength: 1
          maxLength: 100
          example: "Electronics"
        inStock:
          type: boolean
          example: true
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/product.jpg"
        tags:
          type: array
          items:
            type: string
          example: ["wireless", "audio", "electronics"]

    # File schemas
    FileRecord:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        originalName:
          type: string
          example: "document.pdf"
        filename:
          type: string
          example: "document-1640995200000-123456789.pdf"
        mimetype:
          type: string
          example: "application/pdf"
        size:
          type: integer
          example: 1048576
        uploadedBy:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        uploadedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
      required:
        - id
        - originalName
        - filename
        - mimetype
        - size
        - uploadedBy
        - uploadedAt

    # Authentication schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          example: "securepassword123"
      required:
        - password
      anyOf:
        - required: [email]
        - required: [username]

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          example: "johndoe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 6
          example: "securepassword123"
        role:
          type: string
          enum: [admin, user, guest]
          default: user
          example: "user"
        profile:
          type: object
          properties:
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
      required:
        - username
        - email
        - password

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
            accessToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refreshToken:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            accessTokenExpiresAt:
              type: string
              format: date-time
              example: "2024-01-01T13:00:00.000Z"
            refreshTokenExpiresAt:
              type: string
              format: date-time
              example: "2024-01-08T12:00:00.000Z"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00.000Z"
      required:
        - success
        - data
        - timestamp

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account with the provided credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email/username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logout the current user and invalidate the session
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: Retrieve the profile information of the authenticated user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update the profile information of the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generate a new access token using a valid refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required:
                - refreshToken
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Refresh token expired or invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout-all:
    post:
      tags:
        - Authentication
      summary: Logout from all devices
      description: Logout the user from all devices by invalidating all sessions
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logged out from all devices successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # User management endpoints
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of all users
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Users
      summary: Update user
      description: Update a user's information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Email or username already taken
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Cannot delete self
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  # Product management endpoints
  /products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Retrieve a paginated list of products with optional search and filtering
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: q
          in: query
          description: Search query for product name or description
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
            format: float
            minimum: 0
        - name: maxPrice
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
            format: float
            minimum: 0
        - name: inStock
          in: query
          description: Filter by stock availability
          required: false
          schema:
            type: boolean
        - name: tags
          in: query
          description: Filter by product tags
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Product"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      tags:
        - Products
      summary: Create a new product
      description: Create a new product (authenticated users only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRequest"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/search:
    get:
      tags:
        - Products
      summary: Search products
      description: Search products with advanced filtering options (alias for GET /products with query parameters)
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: q
          in: query
          description: Search query for product name or description
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Filter by product category
          required: false
          schema:
            type: string
        - name: minPrice
          in: query
          description: Minimum price filter
          required: false
          schema:
            type: number
            format: float
            minimum: 0
        - name: maxPrice
          in: query
          description: Maximum price filter
          required: false
          schema:
            type: number
            format: float
            minimum: 0
        - name: inStock
          in: query
          description: Filter by stock availability
          required: false
          schema:
            type: boolean
        - name: tags
          in: query
          description: Filter by product tags
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
      responses:
        "200":
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Product"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/categories:
    get:
      tags:
        - Products
      summary: Get product categories
      description: Retrieve all available product categories
      responses:
        "200":
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: string
                        example:
                          ["Electronics", "Clothing", "Books", "Home & Garden"]
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      tags:
        - Products
      summary: Update product
      description: Update a product's information (authenticated users only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductRequest"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Product"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Products
      summary: Delete product
      description: Delete a product (authenticated users only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # File management endpoints
  /files/upload:
    post:
      tags:
        - Files
      summary: Upload files
      description: Upload one or more files (authenticated users only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                  maxItems: 10
                  description: Files to upload (max 10 files, 50MB each)
              required:
                - files
      responses:
        "201":
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "3 file(s) uploaded successfully"
                          files:
                            type: array
                            items:
                              $ref: "#/components/schemas/FileRecord"
        "400":
          description: Invalid file or file too large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /files:
    get:
      tags:
        - Files
      summary: Get all files
      description: Retrieve a paginated list of files (users see only their own files, admins see all)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: uploadedBy
          in: query
          description: Filter by uploader ID (admin only)
          required: false
          schema:
            type: string
            format: uuid
        - name: mimetype
          in: query
          description: Filter by file MIME type
          required: false
          schema:
            type: string
        - name: minSize
          in: query
          description: Minimum file size filter (bytes)
          required: false
          schema:
            type: integer
            minimum: 0
        - name: maxSize
          in: query
          description: Maximum file size filter (bytes)
          required: false
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginatedResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/FileRecord"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /files/stats:
    get:
      tags:
        - Files
      summary: Get file statistics
      description: Retrieve file upload statistics
      security:
        - BearerAuth: []
      responses:
        "200":
          description: File statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          totalFiles:
                            type: integer
                            example: 150
                          totalSize:
                            type: integer
                            example: 1048576000
                          averageSize:
                            type: number
                            format: float
                            example: 6990506.67
                          filesByType:
                            type: object
                            additionalProperties:
                              type: integer
                            example:
                              "image/jpeg": 45
                              "application/pdf": 30
                              "text/plain": 25
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /files/{id}:
    get:
      tags:
        - Files
      summary: Get file metadata by ID
      description: Retrieve file metadata by ID (users can only access their own files)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: File metadata retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/FileRecord"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      tags:
        - Files
      summary: Delete file
      description: Delete a file and its metadata (users can only delete their own files)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /files/{id}/download:
    get:
      tags:
        - Files
      summary: Download file
      description: Download a file by ID (users can only download their own files)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: File ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              description: Attachment filename
              schema:
                type: string
                example: 'attachment; filename="document.pdf"'
            Content-Type:
              description: File MIME type
              schema:
                type: string
                example: "application/pdf"
            Content-Length:
              description: File size in bytes
              schema:
                type: integer
                example: 1048576
        "401":
          description: Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: File not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  # Testing utility endpoints
  /test/delay/{ms}:
    get:
      tags:
        - Testing
      summary: Simulate delay
      description: Simulate a delay for testing timeout scenarios
      parameters:
        - name: ms
          in: path
          description: Delay in milliseconds (max 30000)
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: 30000
            example: 1000
      responses:
        "200":
          description: Delayed response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Delayed response after 1000ms"
                          delay:
                            type: integer
                            example: 1000
                          timestamp:
                            type: string
                            format: date-time
                            example: "2024-01-01T12:00:01.000Z"
        "400":
          description: Invalid delay value
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /test/error/{code}:
    get:
      tags:
        - Testing
      summary: Simulate HTTP error
      description: Simulate specific HTTP error codes for testing error handling
      parameters:
        - name: code
          in: path
          description: HTTP status code to simulate
          required: true
          schema:
            type: integer
            enum: [400, 401, 403, 404, 409, 422, 429, 500, 502, 503, 504]
            example: 404
      responses:
        "400":
          description: Simulated Bad Request error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Simulated Unauthorized error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: Simulated Forbidden error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Simulated Not Found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Simulated Conflict error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Simulated Unprocessable Entity error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: Simulated Too Many Requests error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Simulated Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "502":
          description: Simulated Bad Gateway error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "503":
          description: Simulated Service Unavailable error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "504":
          description: Simulated Gateway Timeout error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /test/echo:
    post:
      tags:
        - Testing
      summary: Echo request data
      description: Echo back the request data for testing purposes
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              example:
                message: "Hello, World!"
                data: [1, 2, 3]
      responses:
        "200":
          description: Request data echoed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          method:
                            type: string
                            example: "POST"
                          url:
                            type: string
                            example: "/api/test/echo"
                          headers:
                            type: object
                            additionalProperties: true
                          body:
                            type: object
                            additionalProperties: true
                          query:
                            type: object
                            additionalProperties: true
                          params:
                            type: object
                            additionalProperties: true
                          timestamp:
                            type: string
                            format: date-time
                            example: "2024-01-01T12:00:00.000Z"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /test/large-dataset:
    get:
      tags:
        - Testing
      summary: Generate large dataset
      description: Generate a large dataset for performance testing
      parameters:
        - name: count
          in: query
          description: Number of items to generate (max 10000)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            default: 1000
        - name: delay
          in: query
          description: Additional delay in milliseconds
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: Large dataset generated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
                                  example: "Item 1"
                                description:
                                  type: string
                                  example: "This is a description for item 1"
                                value:
                                  type: integer
                                  example: 542
                                category:
                                  type: string
                                  example: "Category 1"
                                active:
                                  type: boolean
                                  example: true
                                createdAt:
                                  type: string
                                  format: date-time
                                  example: "2024-01-01T12:00:00.000Z"
                          count:
                            type: integer
                            example: 1000
                          generatedAt:
                            type: string
                            format: date-time
                            example: "2024-01-01T12:00:00.000Z"
        "400":
          description: Dataset too large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /test/memory-intensive:
    get:
      tags:
        - Testing
      summary: Simulate memory-intensive operation
      description: Simulate a memory-intensive operation for performance testing
      parameters:
        - name: size
          in: query
          description: Memory allocation size in bytes (max 10MB)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 10000000
            default: 1000000
      responses:
        "200":
          description: Memory-intensive operation completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Memory-intensive operation completed"
                          allocatedBytes:
                            type: integer
                            example: 1000000
                          arrayLength:
                            type: integer
                            example: 1000000
                          timestamp:
                            type: string
                            format: date-time
                            example: "2024-01-01T12:00:00.000Z"
        "400":
          description: Memory allocation too large
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /test/random-failure:
    get:
      tags:
        - Testing
      summary: Simulate random failures
      description: Simulate random failures for testing error handling and retry logic
      parameters:
        - name: rate
          in: query
          description: Failure rate (0.0 to 1.0, default 0.5)
          required: false
          schema:
            type: number
            format: float
            minimum: 0.0
            maximum: 1.0
            default: 0.5
      responses:
        "200":
          description: Random failure test passed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Random failure test passed"
                          failureRate:
                            type: number
                            format: float
                            example: 0.5
                          timestamp:
                            type: string
                            format: date-time
                            example: "2024-01-01T12:00:00.000Z"
        "400":
          description: Invalid failure rate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Random failure occurred
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /test/console-error:
    get:
      tags:
        - Testing
      summary: Generate console errors
      description: Generate console errors for testing logging and monitoring
      parameters:
        - name: type
          in: query
          description: Type of console message to generate
          required: false
          schema:
            type: string
            enum: [error, warn, info, debug]
            default: error
      responses:
        "200":
          description: Console error generated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/SuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Console error generated successfully"
                          type:
                            type: string
                            example: "error"
                          timestamp:
                            type: string
                            format: date-time
                            example: "2024-01-01T12:00:00.000Z"
        "400":
          description: Unsupported error type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
